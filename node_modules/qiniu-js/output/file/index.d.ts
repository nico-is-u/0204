import { Result, UploadBlob as BaseUploadBlob, UploadFile as BaseUploadFile, FileData as CommonFileData } from '../@internal';
declare class UploadBlob implements BaseUploadBlob {
    private blob;
    constructor(blob: Blob);
    size(): number;
    readAsBrowserBlob(): Blob;
}
export declare type FileData = {
    type: 'file';
    data: File;
} & CommonFileData | {
    type: 'string';
    data: string;
} & CommonFileData | {
    type: 'array-buffer';
    data: ArrayBuffer;
} & CommonFileData;
export declare class UploadFile implements BaseUploadFile {
    private fileData;
    private file;
    constructor(fileData: FileData);
    free(): Promise<Result<true>>;
    path(): Promise<Result<string>>;
    key(): Promise<Result<string | null>>;
    name(): Promise<Result<string | null>>;
    size(): Promise<Result<number>>;
    mimeType(): Promise<Result<string | null>>;
    metadata(): Promise<Result<Record<string, string>>>;
    slice(chunkSize?: number): Promise<Result<UploadBlob[]>>;
    readAsBrowserFile(): File;
}
export declare function isUploadFile(data: unknown): data is UploadFile;
export declare function isUploadBlob(data: unknown): data is UploadBlob;
export {};
